import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  String? selectedMood; // –í—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
  TextEditingController noteController = TextEditingController(); // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –∑–∞–º–µ—Ç–æ–∫

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –∑–∞–º–µ—Ç–∫–∏
  Future<void> saveMood() async {
    if (selectedMood == null || noteController.text.isEmpty) {
      // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É')),
      );
      return;
    }

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    Map<String, String> newEntry = {
      'mood': selectedMood!,
      'note': noteController.text,
      'date': DateTime.now().toString(),
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ SharedPreferences
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String? savedEntries = prefs.getString('entries');
    List<Map<String, String>> entries = savedEntries != null
        ? List<Map<String, String>>.from(
            jsonDecode(savedEntries).map((entry) => Map<String, String>.from(entry)),
          )
        : [];
    entries.add(newEntry);

    prefs.setString('entries', jsonEncode(entries));

    // –û—á–∏—â–∞–µ–º –≤–≤–æ–¥ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
    setState(() {
      selectedMood = null;
      noteController.clear();
    });

    // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –∑–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!')),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('–ì–ª–∞–≤–Ω–∞—è'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            Text(
              '–ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ?',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
            SizedBox(height: 10),

            // –°–º–∞–π–ª–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
            Wrap(
              alignment: WrapAlignment.center,
              spacing: 20,
              runSpacing: 10,
              children: [
                GestureDetector(
                  onTap: () {
                    setState(() {
                      selectedMood = 'üòä';
                    });
                  },
                  child: Text(
                    'üòä',
                    style: TextStyle(
                      fontSize: 48,
                      color: selectedMood == 'üòä' ? Colors.blue : Colors.black,
                    ),
                  ),
                ),
                GestureDetector(
                  onTap: () {
                    setState(() {
                      selectedMood = 'üòê';
                    });
                  },
                  child: Text(
                    'üòê',
                    style: TextStyle(
                      fontSize: 48,
                      color: selectedMood == 'üòê' ? Colors.blue : Colors.black,
                    ),
                  ),
                ),
                GestureDetector(
                  onTap: () {
                    setState(() {
                      selectedMood = 'üò¢';
                    });
                  },
                  child: Text(
                    'üò¢',
                    style: TextStyle(
                      fontSize: 48,
                      color: selectedMood == 'üò¢' ? Colors.blue : Colors.black,
                    ),
                  ),
                ),
                GestureDetector(
                  onTap: () {
                    setState(() {
                      selectedMood = 'üòÇ';
                    });
                  },
                  child: Text(
                    'üòÇ',
                    style: TextStyle(
                      fontSize: 48,
                      color: selectedMood == 'üòÇ' ? Colors.blue : Colors.black,
                    ),
                  ),
                ),
                GestureDetector(
                  onTap: () {
                    setState(() {
                      selectedMood = 'üò°';
                    });
                  },
                  child: Text(
                    'üò°',
                    style: TextStyle(
                      fontSize: 48,
                      color: selectedMood == 'üò°' ? Colors.blue : Colors.black,
                    ),
                  ),
                ),
                GestureDetector(
                  onTap: () {
                    setState(() {
                      selectedMood = 'ü•≥';
                    });
                  },
                  child: Text(
                    'ü•≥',
                    style: TextStyle(
                      fontSize: 48,
                      color: selectedMood == 'ü•≥' ? Colors.blue : Colors.black,
                    ),
                  ),
                ),
              ],
            ),
            SizedBox(height: 20),

            // –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∑–∞–º–µ—Ç–∫–∏
            TextField(
              controller: noteController,
              decoration: InputDecoration(
                border: OutlineInputBorder(),
                labelText: '–î–æ–±–∞–≤—å—Ç–µ –∑–∞–º–µ—Ç–∫—É',
              ),
              maxLines: 3,
            ),
            SizedBox(height: 20),

            // –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            ElevatedButton(
              onPressed: saveMood,
              child: Text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'),
            ),
          ],
        ),
      ),
    );
  }

  @override
  void dispose() {
    noteController.dispose();
    super.dispose();
  }
}
